{
  "info": {
    "_postman_id": "7e6a2321-0ea6-4068-85da-e8463a3b9751",
    "name": "omul-e2e",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21634154"
  },
  "item": [
    {
      "name": "newCustomer",
      "item": [
        {
          "name": "personnel:register_employee",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const moment = require('moment');",
                  "",
                  "pm.collectionVariables.set('employeeLogin', pm.variables.replaceIn('{{$guid}}'));",
                  "pm.collectionVariables.set('employeeFirstName', pm.variables.replaceIn('{{$randomFirstName}}'));",
                  "pm.collectionVariables.set('employeeLastName', pm.variables.replaceIn('{{$randomLastName}}'));",
                  "pm.collectionVariables.set('employeeGender', _.sample(['MALE', 'FEMALE']));",
                  "pm.collectionVariables.set('employeeDocumentId', pm.variables.replaceIn('{{$guid}}'));",
                  "pm.collectionVariables.set('employeeBirthDate', moment().format(\"YYYY-MM-DD\"));",
                  "pm.collectionVariables.set('employeeEmail', pm.variables.replaceIn('{{$randomEmail}}'));",
                  "pm.collectionVariables.set('employeePhone', pm.variables.replaceIn('{{$randomPhoneNumberExt}}'));",
                  "pm.collectionVariables.set('employeeQualification', pm.variables.replaceIn('{{$randomJobTitle}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.firstName).to.eql(pm.collectionVariables.get(\"employeeFirstName\"));",
                  "    pm.expect(body.lastName).to.eql(pm.collectionVariables.get(\"employeeLastName\"));",
                  "    pm.expect(body.gender).to.eql(pm.collectionVariables.get(\"employeeGender\"));",
                  "    pm.expect(body.documentId).to.eql(pm.collectionVariables.get(\"employeeDocumentId\"));",
                  "    pm.expect(body.birthDay).to.eql(pm.collectionVariables.get(\"employeeBirthDate\"));",
                  "    pm.expect(body.email).to.eql(pm.collectionVariables.get(\"employeeEmail\"));",
                  "    pm.expect(body.phone).to.eql(pm.collectionVariables.get(\"employeePhone\"));",
                  "    pm.expect(body.qualification).to.eql(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  "",
                  "pm.collectionVariables.set('doctorId', body.employeeId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login\": \"{{employeeLogin}}\",\n    \"firstName\": \"{{employeeFirstName}}\",\n    \"lastName\": \"{{employeeLastName}}\",\n    \"gender\": \"{{employeeGender}}\",\n    \"documentId\": \"{{employeeDocumentId}}\",\n    \"birthDay\": \"{{employeeBirthDate}}\",\n    \"phone\": \"{{employeePhone}}\",\n    \"email\": \"{{employeeEmail}}\",\n    \"qualification\": \"{{employeeQualification}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{personnelPort}}{{urlPrefix}}/employee",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{personnelPort}}{{urlPrefix}}",
              "path": [
                "employee"
              ]
            }
          },
          "response": []
        },
        {
          "name": "init",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "doctorId = pm.collectionVariables.get(\"doctorId\")",
                  "body = pm.response.json();",
                  "length = body.length;",
                  "pm.collectionVariables.set(\"firstSlotIdx\", length);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/manage/slot",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "manage",
                "slot"
              ]
            }
          },
          "response": []
        },
        {
          "name": "personnel:get_employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "    const body = pm.response.json();",
                  "    pm.expect(body.firstName).to.eql(pm.collectionVariables.get(\"employeeFirstName\"));",
                  "    pm.expect(body.lastName).to.eql(pm.collectionVariables.get(\"employeeLastName\"));",
                  "    pm.expect(body.gender).to.eql(pm.collectionVariables.get(\"employeeGender\"));",
                  "    pm.expect(body.documentId).to.eql(pm.collectionVariables.get(\"employeeDocumentId\"));",
                  "    pm.expect(body.birthDay).to.eql(pm.collectionVariables.get(\"employeeBirthDate\"));",
                  "    pm.expect(body.email).to.eql(pm.collectionVariables.get(\"employeeEmail\"));",
                  "    pm.expect(body.phone).to.eql(pm.collectionVariables.get(\"employeePhone\"));",
                  "    pm.expect(body.qualification).to.eql(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{personnelPort}}{{urlPrefix}}/employee?employeeId={{doctorId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{personnelPort}}{{urlPrefix}}",
              "path": [
                "employee"
              ],
              "query": [
                {
                  "key": "employeeId",
                  "value": "{{doctorId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:put_new_slots",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body).to.eq(2);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"doctorId\": {{doctorId}},\n    \"dateTimeStart\": \"2024-02-10T09:00:00\",\n    \"dateTimeEnd\": \"2024-02-10T10:00:00\",\n    \"status\": \"FREE\"\n  },\n    {\n    \"doctorId\": {{doctorId}},\n    \"dateTimeStart\": \"2024-02-10T10:00:00\",\n    \"dateTimeEnd\": \"2024-02-10T11:00:00\",\n    \"status\": \"FREE\"\n  }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/manage/slot",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "manage",
                "slot"
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_free_slots_filtered",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "",
                  "    pm.expect(body.doctorId).to.eql(doctorId);",
                  "    pm.expect(body.dateFrom).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.dateTo).to.eql(\"2024-02-10T14:00:00\");",
                  "",
                  "    pm.expect(body.timeSlots.length).to.eq(2);",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[0].dateTimeStart).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.timeSlots[0].dateTimeEnd).to.eql(\"2024-02-10T10:00:00\");",
                  "",
                  "    employeeFullName = \"\"+ pm.collectionVariables.get(\"employeeFirstName\") + \" \" + pm.collectionVariables.get(\"employeeLastName\");",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[0].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "",
                  "    pm.expect(body.timeSlots[1].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[1].dateTimeStart).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.timeSlots[1].dateTimeEnd).to.eql(\"2024-02-10T11:00:00\");",
                  "    pm.expect(body.timeSlots[1].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[1].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  "",
                  "pm.collectionVariables.set('timeSlotId', body.timeSlots[0].slotId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/free?doctorId={{doctorId}}&dateFrom=2024-02-10T09:00:00&dateTo=2024-02-10T14:00:00",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "free"
              ],
              "query": [
                {
                  "key": "doctorId",
                  "value": "{{doctorId}}"
                },
                {
                  "key": "dateFrom",
                  "value": "2024-02-10T09:00:00"
                },
                {
                  "key": "dateTo",
                  "value": "2024-02-10T14:00:00"
                },
                {
                  "key": "status",
                  "value": "FREE",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:make_appointment_uuid",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('idempotentKey', pm.variables.replaceIn('{{$guid}}'));",
                  "pm.collectionVariables.set('customerEmail', pm.variables.replaceIn('{{$randomEmail}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "if (body.status == 'PENDING') {",
                  "    pm.collectionVariables.set(\"appointmentServiceType\", \"async\")",
                  "    pm.test(\"JSON test\", () => {",
                  "        pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"))",
                  "    });",
                  "    setTimeout(function () {}, 4000)",
                  "}",
                  "else if (body.status == 'CREATED') {",
                  "    pm.collectionVariables.set(\"appointmentServiceType\", \"sync\")",
                  "    pm.test(\"JSON test\", () => {",
                  "        pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"))",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timeSlotId\": {{timeSlotId}},\n    \"idempotentKey\": \"{{idempotentKey}}\",\n    \"email\": \"{{customerEmail}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/newCustomer",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "newCustomer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:make_appointment_uuid again",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.httpCode).is.eq(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timeSlotId\": {{timeSlotId}},\n    \"idempotentKey\": \"{{idempotentKey}}\",\n    \"email\": \"{{customerEmail}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/newCustomer",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "newCustomer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:get_appointment_uuid",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"));",
                  "    pm.expect(body.appointmentId).is.not.null;",
                  "    pm.expect(body.customerId).is.not.null;",
                  "    pm.expect(body.timeSlotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "    pm.expect(body.status).to.eql('CREATED');",
                  "})",
                  "pm.collectionVariables.set(\"appointmentId\", body.appointmentId);",
                  "pm.collectionVariables.set(\"customerId\", body.customerId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer?idempotentKey={{idempotentKey}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ],
              "query": [
                {
                  "key": "idempotentKey",
                  "value": "{{idempotentKey}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "get_temporary_user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "    const body = pm.response.json();",
                  "    pm.expect(body.customerId).to.eql(pm.collectionVariables.get(\"customerId\"));",
                  "    pm.expect(body.email).to.eql(pm.collectionVariables.get(\"customerEmail\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{customerPort}}{{urlPrefix}}/customer?customerId={{customerId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{customerPort}}{{urlPrefix}}",
              "path": [
                "customer"
              ],
              "query": [
                {
                  "key": "customerId",
                  "value": "{{customerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_reserved_slot",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "pm.test(\"JSON test\", () => {",
                  "",
                  "    pm.expect(body.slotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "    pm.expect(body.doctorId).to.eql(pm.collectionVariables.get(\"doctorId\"));",
                  "    pm.expect(body.dateTimeStart).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.dateTimeEnd).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.status).to.eql(\"RESERVED\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/{{timeSlotId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "{{timeSlotId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "FREE",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_other_free_slots",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.timeSlots.length).to.eq(1);",
                  "",
                  "    pm.expect(body.timeSlots[0].slotId).to.eql(pm.collectionVariables.get(\"timeSlotId\") + 1);",
                  "    pm.expect(body.timeSlots[0].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[0].dateTimeStart).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.timeSlots[0].dateTimeEnd).to.eql(\"2024-02-10T11:00:00\");",
                  "    pm.expect(body.timeSlots[0].doctorFullName).is.not.empty;",
                  "    pm.expect(body.timeSlots[0].doctorQualification).is.not.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/free?dateFrom=2024-02-10T09:00:00&doctorId={{doctorId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "free"
              ],
              "query": [
                {
                  "key": "dateFrom",
                  "value": "2024-02-10T09:00:00"
                },
                {
                  "key": "doctorId",
                  "value": "{{doctorId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:confirm_appointment_uuid",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"idempotentKey\": \"{{idempotentKey}}\",\n    \"status\": \"CONFIRMED\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:get_appointment_uuid_confirmed",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"));",
                  "    pm.expect(body.appointmentId).is.equal(pm.collectionVariables.get(\"appointmentId\"));",
                  "    pm.expect(body.customerId).is.equal(pm.collectionVariables.get(\"customerId\"));",
                  "    pm.expect(body.timeSlotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "    pm.expect(body.status).to.eql('CONFIRMED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer?idempotentKey={{idempotentKey}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ],
              "query": [
                {
                  "key": "idempotentKey",
                  "value": "{{idempotentKey}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_free_slots_filtered",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "",
                  "    pm.expect(body.doctorId).to.eql(doctorId);",
                  "    pm.expect(body.dateFrom).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.dateTo).to.eql(\"2024-02-10T14:00:00\");",
                  "",
                  "    pm.expect(body.timeSlots.length).to.eq(1);",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[0].dateTimeStart).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.timeSlots[0].dateTimeEnd).to.eql(\"2024-02-10T11:00:00\");",
                  "",
                  "    employeeFullName = \"\"+ pm.collectionVariables.get(\"employeeFirstName\") + \" \" + pm.collectionVariables.get(\"employeeLastName\");",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[0].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/free?doctorId={{doctorId}}&dateFrom=2024-02-10T09:00:00&dateTo=2024-02-10T14:00:00&status=FREE",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "free"
              ],
              "query": [
                {
                  "key": "doctorId",
                  "value": "{{doctorId}}"
                },
                {
                  "key": "dateFrom",
                  "value": "2024-02-10T09:00:00"
                },
                {
                  "key": "dateTo",
                  "value": "2024-02-10T14:00:00"
                },
                {
                  "key": "status",
                  "value": "FREE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:cancel_appointment_uuid",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.collectionVariables.get(\"appointmentServiceType\")==\"async\") {",
                  "    setTimeout(function () {}, 2000)",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"idempotentKey\": \"{{idempotentKey}}\",\n    \"status\": \"CANCELED\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:get_appointment_uuid_canceled",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"));",
                  "    pm.expect(body.appointmentId).is.equal(pm.collectionVariables.get(\"appointmentId\"));",
                  "    pm.expect(body.customerId).is.equal(pm.collectionVariables.get(\"customerId\"));",
                  "    pm.expect(body.timeSlotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "    pm.expect(body.status).to.eql('CANCELED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer?idempotentKey={{idempotentKey}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ],
              "query": [
                {
                  "key": "idempotentKey",
                  "value": "{{idempotentKey}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_free_slots_filtered",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "",
                  "    pm.expect(body.doctorId).to.eql(doctorId);",
                  "    pm.expect(body.dateFrom).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.dateTo).to.eql(\"2024-02-10T14:00:00\");",
                  "",
                  "    pm.expect(body.timeSlots.length).to.eq(2);",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[0].dateTimeStart).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.timeSlots[0].dateTimeEnd).to.eql(\"2024-02-10T10:00:00\");",
                  "",
                  "    employeeFullName = \"\"+ pm.collectionVariables.get(\"employeeFirstName\") + \" \" + pm.collectionVariables.get(\"employeeLastName\");",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[0].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "",
                  "    pm.expect(body.timeSlots[1].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[1].dateTimeStart).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.timeSlots[1].dateTimeEnd).to.eql(\"2024-02-10T11:00:00\");",
                  "    pm.expect(body.timeSlots[1].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[1].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/free?doctorId={{doctorId}}&dateFrom=2024-02-10T09:00:00&dateTo=2024-02-10T14:00:00&status=FREE",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "free"
              ],
              "query": [
                {
                  "key": "doctorId",
                  "value": "{{doctorId}}"
                },
                {
                  "key": "dateFrom",
                  "value": "2024-02-10T09:00:00"
                },
                {
                  "key": "dateTo",
                  "value": "2024-02-10T14:00:00"
                },
                {
                  "key": "status",
                  "value": "FREE"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "registeredCustomer",
      "item": [
        {
          "name": "personnel:register_employee",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const moment = require('moment');",
                  "",
                  "pm.collectionVariables.set('employeeLogin', pm.variables.replaceIn('{{$guid}}'));",
                  "pm.collectionVariables.set('employeeFirstName', pm.variables.replaceIn('{{$randomFirstName}}'));",
                  "pm.collectionVariables.set('employeeLastName', pm.variables.replaceIn('{{$randomLastName}}'));",
                  "pm.collectionVariables.set('employeeGender', _.sample(['MALE', 'FEMALE']));",
                  "pm.collectionVariables.set('employeeDocumentId', pm.variables.replaceIn('{{$guid}}'));",
                  "pm.collectionVariables.set('employeeBirthDate', moment().format(\"YYYY-MM-DD\"));",
                  "pm.collectionVariables.set('employeeEmail', pm.variables.replaceIn('{{$randomEmail}}'));",
                  "pm.collectionVariables.set('employeePhone', pm.variables.replaceIn('{{$randomPhoneNumberExt}}'));",
                  "pm.collectionVariables.set('employeeQualification', pm.variables.replaceIn('{{$randomJobTitle}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.firstName).to.eql(pm.collectionVariables.get(\"employeeFirstName\"));",
                  "    pm.expect(body.lastName).to.eql(pm.collectionVariables.get(\"employeeLastName\"));",
                  "    pm.expect(body.gender).to.eql(pm.collectionVariables.get(\"employeeGender\"));",
                  "    pm.expect(body.documentId).to.eql(pm.collectionVariables.get(\"employeeDocumentId\"));",
                  "    pm.expect(body.birthDay).to.eql(pm.collectionVariables.get(\"employeeBirthDate\"));",
                  "    pm.expect(body.email).to.eql(pm.collectionVariables.get(\"employeeEmail\"));",
                  "    pm.expect(body.phone).to.eql(pm.collectionVariables.get(\"employeePhone\"));",
                  "    pm.expect(body.qualification).to.eql(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  "",
                  "pm.collectionVariables.set('doctorId', body.employeeId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"login\": \"{{employeeLogin}}\",\n    \"firstName\": \"{{employeeFirstName}}\",\n    \"lastName\": \"{{employeeLastName}}\",\n    \"gender\": \"{{employeeGender}}\",\n    \"documentId\": \"{{employeeDocumentId}}\",\n    \"birthDay\": \"{{employeeBirthDate}}\",\n    \"phone\": \"{{employeePhone}}\",\n    \"email\": \"{{employeeEmail}}\",\n    \"qualification\": \"{{employeeQualification}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{personnelPort}}{{urlPrefix}}/employee",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{personnelPort}}{{urlPrefix}}",
              "path": [
                "employee"
              ]
            }
          },
          "response": []
        },
        {
          "name": "init",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "doctorId = pm.collectionVariables.get(\"doctorId\")",
                  "body = pm.response.json();",
                  "length = body.length;",
                  "pm.collectionVariables.set(\"firstSlotIdx\", length);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/manage/slot",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "manage",
                "slot"
              ]
            }
          },
          "response": []
        },
        {
          "name": "personnel:get_employee",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "    const body = pm.response.json();",
                  "    pm.expect(body.firstName).to.eql(pm.collectionVariables.get(\"employeeFirstName\"));",
                  "    pm.expect(body.lastName).to.eql(pm.collectionVariables.get(\"employeeLastName\"));",
                  "    pm.expect(body.gender).to.eql(pm.collectionVariables.get(\"employeeGender\"));",
                  "    pm.expect(body.documentId).to.eql(pm.collectionVariables.get(\"employeeDocumentId\"));",
                  "    pm.expect(body.birthDay).to.eql(pm.collectionVariables.get(\"employeeBirthDate\"));",
                  "    pm.expect(body.email).to.eql(pm.collectionVariables.get(\"employeeEmail\"));",
                  "    pm.expect(body.phone).to.eql(pm.collectionVariables.get(\"employeePhone\"));",
                  "    pm.expect(body.qualification).to.eql(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{personnelPort}}{{urlPrefix}}/employee?employeeId={{doctorId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{personnelPort}}{{urlPrefix}}",
              "path": [
                "employee"
              ],
              "query": [
                {
                  "key": "employeeId",
                  "value": "{{doctorId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:put_new_slots",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body).to.eq(2);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"doctorId\": {{doctorId}},\n    \"dateTimeStart\": \"2024-02-10T09:00:00\",\n    \"dateTimeEnd\": \"2024-02-10T10:00:00\",\n    \"status\": \"FREE\"\n  },\n    {\n    \"doctorId\": {{doctorId}},\n    \"dateTimeStart\": \"2024-02-10T10:00:00\",\n    \"dateTimeEnd\": \"2024-02-10T11:00:00\",\n    \"status\": \"FREE\"\n  }\n]",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/manage/slot",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "manage",
                "slot"
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_free_slots_filtered",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "",
                  "    pm.expect(body.doctorId).to.eql(doctorId);",
                  "    pm.expect(body.dateFrom).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.dateTo).to.eql(\"2024-02-10T14:00:00\");",
                  "",
                  "    pm.expect(body.timeSlots.length).to.eq(2);",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[0].dateTimeStart).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.timeSlots[0].dateTimeEnd).to.eql(\"2024-02-10T10:00:00\");",
                  "",
                  "    employeeFullName = \"\"+ pm.collectionVariables.get(\"employeeFirstName\") + \" \" + pm.collectionVariables.get(\"employeeLastName\");",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[0].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "",
                  "    pm.expect(body.timeSlots[1].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[1].dateTimeStart).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.timeSlots[1].dateTimeEnd).to.eql(\"2024-02-10T11:00:00\");",
                  "    pm.expect(body.timeSlots[1].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[1].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  "",
                  "pm.collectionVariables.set('timeSlotId', body.timeSlots[0].slotId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/free?doctorId={{doctorId}}&dateFrom=2024-02-10T09:00:00&dateTo=2024-02-10T14:00:00",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "free"
              ],
              "query": [
                {
                  "key": "doctorId",
                  "value": "{{doctorId}}"
                },
                {
                  "key": "dateFrom",
                  "value": "2024-02-10T09:00:00"
                },
                {
                  "key": "dateTo",
                  "value": "2024-02-10T14:00:00"
                },
                {
                  "key": "status",
                  "value": "FREE",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "customer:register_permanent_user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const moment = require('moment');",
                  "",
                  "pm.collectionVariables.set('customerFirstName', pm.variables.replaceIn('{{$randomFirstName}}'));",
                  "pm.collectionVariables.set('customerLastName', pm.variables.replaceIn('{{$randomLastName}}'));",
                  "pm.collectionVariables.set('customerGender', _.sample(['MALE', 'FEMALE']));",
                  "pm.collectionVariables.set('customerDocumentId', pm.variables.replaceIn('{{$guid}}'));",
                  "pm.collectionVariables.set('customerBirthDate', moment().format(\"YYYY-MM-DD\"));",
                  "pm.collectionVariables.set('customerEmail', pm.variables.replaceIn('{{$randomEmail}}'));",
                  "pm.collectionVariables.set('customerPhone', pm.variables.replaceIn('{{$randomPhoneNumberExt}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.firstName).to.eql(pm.collectionVariables.get(\"customerFirstName\"));",
                  "    pm.expect(body.lastName).to.eql(pm.collectionVariables.get(\"customerLastName\"));",
                  "    pm.expect(body.gender).to.eql(pm.collectionVariables.get(\"customerGender\"));",
                  "    pm.expect(body.documentId).to.eql(pm.collectionVariables.get(\"customerDocumentId\"));",
                  "    pm.expect(body.birthDay).to.eql(pm.collectionVariables.get(\"customerBirthDate\"));",
                  "    pm.expect(body.email).to.eql(pm.collectionVariables.get(\"customerEmail\"));",
                  "    pm.expect(body.phone).to.eql(pm.collectionVariables.get(\"customerPhone\"));",
                  "});",
                  "",
                  "pm.collectionVariables.set('customerId', body.customerId);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"{{customerFirstName}}\",\n  \"lastName\": \"{{customerLastName}}\",\n  \"gender\": \"{{customerGender}}\",\n  \"documentId\": \"{{customerDocumentId}}\",\n  \"birthDay\": \"{{customerBirthDate}}\",\n  \"phone\": \"{{customerPhone}}\",\n  \"email\": \"{{customerEmail}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{customerPort}}{{urlPrefix}}/customer",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{customerPort}}{{urlPrefix}}",
              "path": [
                "customer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "customer:get_permanent_user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "    const body = pm.response.json();",
                  "    pm.expect(body.firstName).to.eql(pm.collectionVariables.get(\"customerFirstName\"));",
                  "    pm.expect(body.lastName).to.eql(pm.collectionVariables.get(\"customerLastName\"));",
                  "    pm.expect(body.gender).to.eql(pm.collectionVariables.get(\"customerGender\"));",
                  "    pm.expect(body.documentId).to.eql(pm.collectionVariables.get(\"customerDocumentId\"));",
                  "    pm.expect(body.birthDay).to.eql(pm.collectionVariables.get(\"customerBirthDate\"));",
                  "    pm.expect(body.email).to.eql(pm.collectionVariables.get(\"customerEmail\"));",
                  "    pm.expect(body.phone).to.eql(pm.collectionVariables.get(\"customerPhone\"));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{customerPort}}{{urlPrefix}}/customer?customerId={{customerId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{customerPort}}{{urlPrefix}}",
              "path": [
                "customer"
              ],
              "query": [
                {
                  "key": "customerId",
                  "value": "{{customerId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:make_appointment_id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.collectionVariables.set('idempotentKey', pm.variables.replaceIn('{{$guid}}'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "if (body.status == 'PENDING') {",
                  "    pm.collectionVariables.set(\"appointmentServiceType\", \"async\")",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"))",
                  "    pm.expect(body.customerId).is.equal(pm.collectionVariables.get(\"customerId\"));",
                  "    setTimeout(function () { }, 2000)",
                  "}",
                  "else if (body.status == 'CREATED') {",
                  "    pm.collectionVariables.set(\"appointmentServiceType\", \"sync\")",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"))",
                  "    pm.expect(body.customerId).is.equal(pm.collectionVariables.get(\"customerId\"));",
                  "    pm.expect(body.timeSlotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "}",
                  "else",
                  "    throw new Error(\"wrong status of appointment\")"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": {{customerId}},\n    \"timeSlotId\": {{timeSlotId}},\n    \"idempotentKey\": \"{{idempotentKey}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer?idempotentKey={{idempotentKey}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ],
              "query": [
                {
                  "key": "idempotentKey",
                  "value": "{{idempotentKey}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:make_appointment_id again",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.httpCode).is.eq(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerId\": {{customerId}},\n    \"timeSlotId\": {{timeSlotId}},\n    \"idempotentKey\": \"{{idempotentKey}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:get_appointment_uuid",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"))",
                  "    pm.expect(body.appointmentId).is.not.null",
                  "    pm.expect(body.customerId).is.equal(pm.collectionVariables.get(\"customerId\"))",
                  "    pm.expect(body.timeSlotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"))",
                  "    pm.expect(body.status).to.eql('CREATED')",
                  "})",
                  "pm.collectionVariables.set(\"appointmentId\", body.appointmentId)",
                  "pm.collectionVariables.set(\"customerId\", body.customerId)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer?idempotentKey={{idempotentKey}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ],
              "query": [
                {
                  "key": "idempotentKey",
                  "value": "{{idempotentKey}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:get_appointment_id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"));",
                  "    pm.expect(body.appointmentId).is.equal(pm.collectionVariables.get(\"appointmentId\"));",
                  "    pm.expect(body.customerId).is.equal(pm.collectionVariables.get(\"customerId\"));",
                  "    pm.expect(body.timeSlotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "    pm.expect(body.status).to.eql('CREATED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer?appointmentId={{appointmentId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ],
              "query": [
                {
                  "key": "appointmentId",
                  "value": "{{appointmentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_reserved_slot",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "pm.test(\"JSON test\", () => {",
                  "",
                  "    pm.expect(body.slotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "    pm.expect(body.doctorId).to.eql(pm.collectionVariables.get(\"doctorId\"));",
                  "    pm.expect(body.dateTimeStart).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.dateTimeEnd).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.status).to.eql(\"RESERVED\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/{{timeSlotId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "{{timeSlotId}}"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "FREE",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_other_free_slots",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.timeSlots.length).to.eq(1);",
                  "",
                  "    pm.expect(body.timeSlots[0].slotId).to.eql(pm.collectionVariables.get(\"timeSlotId\") + 1);",
                  "    pm.expect(body.timeSlots[0].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[0].dateTimeStart).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.timeSlots[0].dateTimeEnd).to.eql(\"2024-02-10T11:00:00\");",
                  "    pm.expect(body.timeSlots[0].doctorFullName).is.not.empty;",
                  "    pm.expect(body.timeSlots[0].doctorQualification).is.not.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/free?dateFrom=2024-02-10T09:00:00&doctorId={{doctorId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "free"
              ],
              "query": [
                {
                  "key": "dateFrom",
                  "value": "2024-02-10T09:00:00"
                },
                {
                  "key": "doctorId",
                  "value": "{{doctorId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:confirm_appointment_id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"appointmentId\": \"{{appointmentId}}\",\n    \"status\": \"CONFIRMED\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:get_appointment_uuid_confirmed",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"));",
                  "    pm.expect(body.appointmentId).is.equal(pm.collectionVariables.get(\"appointmentId\"));",
                  "    pm.expect(body.customerId).is.equal(pm.collectionVariables.get(\"customerId\"));",
                  "    pm.expect(body.timeSlotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "    pm.expect(body.status).to.eql('CONFIRMED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer?appointmentId={{appointmentId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ],
              "query": [
                {
                  "key": "appointmentId",
                  "value": "{{appointmentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_free_slots_filtered",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "",
                  "    pm.expect(body.doctorId).to.eql(doctorId);",
                  "    pm.expect(body.dateFrom).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.dateTo).to.eql(\"2024-02-10T14:00:00\");",
                  "",
                  "    pm.expect(body.timeSlots.length).to.eq(1);",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[0].dateTimeStart).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.timeSlots[0].dateTimeEnd).to.eql(\"2024-02-10T11:00:00\");",
                  "",
                  "    employeeFullName = \"\"+ pm.collectionVariables.get(\"employeeFirstName\") + \" \" + pm.collectionVariables.get(\"employeeLastName\");",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[0].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/free?doctorId={{doctorId}}&dateFrom=2024-02-10T09:00:00&dateTo=2024-02-10T14:00:00&status=FREE",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "free"
              ],
              "query": [
                {
                  "key": "doctorId",
                  "value": "{{doctorId}}"
                },
                {
                  "key": "dateFrom",
                  "value": "2024-02-10T09:00:00"
                },
                {
                  "key": "dateTo",
                  "value": "2024-02-10T14:00:00"
                },
                {
                  "key": "status",
                  "value": "FREE"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:cancel_appointment_id_cancel",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.collectionVariables.get(\"appointmentServiceType\")==\"async\") {",
                  "    setTimeout(function () {}, 2000)",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"appointmentId\": \"{{appointmentId}}\",\n    \"status\": \"CANCELED\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ]
            }
          },
          "response": []
        },
        {
          "name": "appointment:get_appointment_id_canceled",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "pm.test(\"JSON test\", () => {",
                  "    pm.expect(body.idempotentKey).is.equal(pm.collectionVariables.get(\"idempotentKey\"));",
                  "    pm.expect(body.appointmentId).is.equal(pm.collectionVariables.get(\"appointmentId\"));",
                  "    pm.expect(body.customerId).is.equal(pm.collectionVariables.get(\"customerId\"));",
                  "    pm.expect(body.timeSlotId).to.eql(pm.collectionVariables.get(\"timeSlotId\"));",
                  "    pm.expect(body.status).to.eql('CANCELED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{appointmentPort}}{{urlPrefix}}/appointment/customer?appointmentId={{appointmentId}}",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{appointmentPort}}{{urlPrefix}}",
              "path": [
                "appointment",
                "customer"
              ],
              "query": [
                {
                  "key": "appointmentId",
                  "value": "{{appointmentId}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "schedule:get_free_slots_filtered",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const body = pm.response.json();",
                  "firstSlotIdx = parseInt(pm.collectionVariables.get(\"firstSlotIdx\"))",
                  "doctorId = parseInt(pm.collectionVariables.get(\"doctorId\"))",
                  "",
                  "pm.test(\"JSON test\", () => {",
                  "",
                  "    pm.expect(body.doctorId).to.eql(doctorId);",
                  "    pm.expect(body.dateFrom).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.dateTo).to.eql(\"2024-02-10T14:00:00\");",
                  "",
                  "    pm.expect(body.timeSlots.length).to.eq(2);",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[0].dateTimeStart).to.eql(\"2024-02-10T09:00:00\");",
                  "    pm.expect(body.timeSlots[0].dateTimeEnd).to.eql(\"2024-02-10T10:00:00\");",
                  "",
                  "    employeeFullName = \"\"+ pm.collectionVariables.get(\"employeeFirstName\") + \" \" + pm.collectionVariables.get(\"employeeLastName\");",
                  "",
                  "    pm.expect(body.timeSlots[0].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[0].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "",
                  "    pm.expect(body.timeSlots[1].doctorId).to.eql(doctorId);",
                  "    pm.expect(body.timeSlots[1].dateTimeStart).to.eql(\"2024-02-10T10:00:00\");",
                  "    pm.expect(body.timeSlots[1].dateTimeEnd).to.eql(\"2024-02-10T11:00:00\");",
                  "    pm.expect(body.timeSlots[1].doctorFullName).is.equal(employeeFullName);",
                  "    pm.expect(body.timeSlots[1].doctorQualification).is.equal(pm.collectionVariables.get(\"employeeQualification\"));",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "http://{{host}}:{{schedulePort}}{{urlPrefix}}/reserve/free?doctorId={{doctorId}}&dateFrom=2024-02-10T09:00:00&dateTo=2024-02-10T14:00:00&status=FREE",
              "protocol": "http",
              "host": [
                "{{host}}"
              ],
              "port": "{{schedulePort}}{{urlPrefix}}",
              "path": [
                "reserve",
                "free"
              ],
              "query": [
                {
                  "key": "doctorId",
                  "value": "{{doctorId}}"
                },
                {
                  "key": "dateFrom",
                  "value": "2024-02-10T09:00:00"
                },
                {
                  "key": "dateTo",
                  "value": "2024-02-10T14:00:00"
                },
                {
                  "key": "status",
                  "value": "FREE"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "customerFirstName",
      "value": ""
    },
    {
      "key": "customerLastName",
      "value": ""
    },
    {
      "key": "customerGender",
      "value": ""
    },
    {
      "key": "customerDocumentId",
      "value": ""
    },
    {
      "key": "customerBirthDate",
      "value": ""
    },
    {
      "key": "customerEmail",
      "value": ""
    },
    {
      "key": "customerPhone",
      "value": ""
    },
    {
      "key": "customerId",
      "value": ""
    },
    {
      "key": "test1Summary",
      "value": ""
    },
    {
      "key": "test1Description",
      "value": ""
    },
    {
      "key": "test1Date",
      "value": ""
    },
    {
      "key": "test1Id",
      "value": ""
    },
    {
      "key": "test2Summary",
      "value": ""
    },
    {
      "key": "test2Description",
      "value": ""
    },
    {
      "key": "test2Date",
      "value": ""
    },
    {
      "key": "test2Id",
      "value": ""
    },
    {
      "key": "test1ResultDescription",
      "value": ""
    },
    {
      "key": "test1ResultDate",
      "value": ""
    },
    {
      "key": "test2ResultDescription",
      "value": ""
    },
    {
      "key": "test2ResultDate",
      "value": ""
    },
    {
      "key": "procedure1Summary",
      "value": ""
    },
    {
      "key": "procedure1Description",
      "value": ""
    },
    {
      "key": "procedure1Date",
      "value": ""
    },
    {
      "key": "procedure1Id",
      "value": ""
    },
    {
      "key": "procedure2Summary",
      "value": ""
    },
    {
      "key": "procedure2Description",
      "value": ""
    },
    {
      "key": "procedure2Date",
      "value": ""
    },
    {
      "key": "procedure2Id",
      "value": ""
    },
    {
      "key": "employeeId",
      "value": ""
    },
    {
      "key": "employeeFirstName",
      "value": ""
    },
    {
      "key": "employeeLastName",
      "value": ""
    },
    {
      "key": "employeeGender",
      "value": ""
    },
    {
      "key": "employeeDocumentId",
      "value": ""
    },
    {
      "key": "employeeBirthDate",
      "value": ""
    },
    {
      "key": "employeeEmail",
      "value": ""
    },
    {
      "key": "employeePhone",
      "value": ""
    },
    {
      "key": "employeeQualification",
      "value": ""
    },
    {
      "key": "employeeLogin",
      "value": ""
    },
    {
      "key": "authLogin",
      "value": ""
    },
    {
      "key": "authUserId",
      "value": ""
    },
    {
      "key": "authRole",
      "value": ""
    },
    {
      "key": "authPassword",
      "value": ""
    },
    {
      "key": "jwt",
      "value": ""
    },
    {
      "key": "timeSlotsLength",
      "value": ""
    },
    {
      "key": "firstSlotIdx",
      "value": ""
    },
    {
      "key": "doctorId",
      "value": "0"
    },
    {
      "key": "idempotentKey",
      "value": ""
    },
    {
      "key": "appointmentId",
      "value": ""
    },
    {
      "key": "timeSlotId",
      "value": ""
    },
    {
      "key": "appointmentServiceType",
      "value": ""
    }
  ]
}